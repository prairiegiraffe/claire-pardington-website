---
import Layout from '~/layouts/Layout.astro';
import DevComponentsSidebar from '~/components/ui/DevComponentsSidebar.astro';

const metadata = {
  title: 'Global Styles Guide â€” AstroWind',
  description:
    'Complete documentation of all global styles, colors, and configuration settings in the AstroWind template.',
};

// CSS Custom Properties from CustomStyles.astro
const cssCustomProperties = {
  light: {
    '--aw-font-sans': 'Inter Variable',
    '--aw-font-serif': 'Inter Variable',
    '--aw-font-heading': 'Inter Variable',
    '--aw-color-primary': 'rgb(1 97 239)',
    '--aw-color-secondary': 'rgb(1 84 207)',
    '--aw-color-accent': 'rgb(109 40 217)',
    '--aw-color-text-heading': 'rgb(0 0 0)',
    '--aw-color-text-default': 'rgb(16 16 16)',
    '--aw-color-text-muted': 'rgb(16 16 16 / 66%)',
    '--aw-color-bg-page': 'rgb(255 255 255)',
    '--aw-color-bg-page-dark': 'rgb(3 6 32)',
  },
  dark: {
    '--aw-font-sans': 'Inter Variable',
    '--aw-font-serif': 'Inter Variable',
    '--aw-font-heading': 'Inter Variable',
    '--aw-color-primary': 'rgb(1 97 239)',
    '--aw-color-secondary': 'rgb(1 84 207)',
    '--aw-color-accent': 'rgb(109 40 217)',
    '--aw-color-text-heading': 'rgb(247, 248, 248)',
    '--aw-color-text-default': 'rgb(229 236 246)',
    '--aw-color-text-muted': 'rgb(229 236 246 / 66%)',
    '--aw-color-bg-page': 'rgb(3 6 32)',
  },
};

// Tailwind Utilities from tailwind.css
const tailwindUtilities = [
  { class: '.bg-page', css: 'background-color: var(--aw-color-bg-page)', description: 'Page background color' },
  { class: '.bg-dark', css: 'background-color: var(--aw-color-bg-page-dark)', description: 'Dark page background' },
  { class: '.bg-light', css: 'background-color: var(--aw-color-bg-page)', description: 'Light page background' },
  { class: '.text-page', css: 'color: var(--aw-color-text-page)', description: 'Page text color' },
  { class: '.text-muted', css: 'color: var(--aw-color-text-muted)', description: 'Muted text color' },
];

// Button Components from tailwind.css
const buttonComponents = [
  {
    class: '.btn',
    description: 'Base button component with rounded, border, and hover styles',
    css: 'inline-flex items-center justify-center rounded-full border-gray-400 border bg-transparent...',
  },
  {
    class: '.btn-primary',
    description: 'Primary button with brand colors',
    css: 'btn + font-semibold bg-primary text-white border-primary hover:bg-secondary...',
  },
  {
    class: '.btn-secondary',
    description: 'Secondary button style',
    css: 'btn (inherits base button styles)',
  },
  {
    class: '.btn-tertiary',
    description: 'Tertiary button without borders',
    css: 'btn + border-none shadow-none text-muted hover:text-gray-900...',
  },
];

// Config data from config.yaml
const configData = {
  site: {
    name: 'AstroWind',
    site: 'https://astrowind.vercel.app',
    base: '/',
    trailingSlash: false,
    googleSiteVerificationId: 'orcPxI47GSa-cRvY11tUe6iGg2IO_RPvnA1q95iEM3M',
  },
  metadata: {
    title: {
      default: 'AstroWind',
      template: '%s â€” AstroWind',
    },
    description:
      'ðŸš€ Suitable for Startups, Small Business, Sass Websites, Professional Portfolios, Marketing Websites, Landing Pages & Blogs.',
    robots: {
      index: true,
      follow: true,
    },
    openGraph: {
      site_name: 'AstroWind',
      type: 'website',
    },
    twitter: {
      handle: '@arthelokyo',
      site: '@arthelokyo',
      cardType: 'summary_large_image',
    },
  },
  i18n: {
    language: 'en',
    textDirection: 'ltr',
  },
  apps: {
    blog: {
      isEnabled: true,
      postsPerPage: 6,
    },
  },
  ui: {
    theme: 'system',
  },
};

// Extract color values for color chips
const extractColorValue = (cssValue) => {
  const rgbMatch = cssValue.match(/rgb\(([^)]+)\)/);
  return rgbMatch ? rgbMatch[1].split(' ').join(', ') : cssValue;
};

// Tailwind Shadow Examples
const shadowExamples = [
  { class: 'shadow-sm', description: 'Small shadow', value: '0 1px 2px 0 rgb(0 0 0 / 0.05)' },
  {
    class: 'shadow',
    description: 'Default shadow',
    value: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
  },
  {
    class: 'shadow-md',
    description: 'Medium shadow',
    value: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
  },
  {
    class: 'shadow-lg',
    description: 'Large shadow',
    value: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
  },
  {
    class: 'shadow-xl',
    description: 'Extra large shadow',
    value: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)',
  },
  { class: 'shadow-2xl', description: '2X large shadow', value: '0 25px 50px -12px rgb(0 0 0 / 0.25)' },
];

// Border Radius Examples
const radiusExamples = [
  { class: 'rounded-none', description: 'No border radius', value: '0px' },
  { class: 'rounded-sm', description: 'Small radius', value: '0.125rem' },
  { class: 'rounded', description: 'Default radius', value: '0.25rem' },
  { class: 'rounded-md', description: 'Medium radius', value: '0.375rem' },
  { class: 'rounded-lg', description: 'Large radius', value: '0.5rem' },
  { class: 'rounded-xl', description: 'Extra large radius', value: '0.75rem' },
  { class: 'rounded-2xl', description: '2X large radius', value: '1rem' },
  { class: 'rounded-3xl', description: '3X large radius', value: '1.5rem' },
  { class: 'rounded-full', description: 'Full radius', value: '9999px' },
];

// Typography Examples
const typographyExamples = [
  { tag: 'h1', class: 'text-4xl font-bold', description: 'Main heading' },
  { tag: 'h2', class: 'text-3xl font-bold', description: 'Section heading' },
  { tag: 'h3', class: 'text-2xl font-semibold', description: 'Subsection heading' },
  { tag: 'h4', class: 'text-xl font-semibold', description: 'Minor heading' },
  { tag: 'h5', class: 'text-lg font-medium', description: 'Small heading' },
  { tag: 'h6', class: 'text-base font-medium', description: 'Smallest heading' },
];

// Text Format Examples - Tailwind uses a modular scale (not perfect thirds, but similar mathematical progression)
const textFormatExamples = [
  { class: 'text-xs', description: 'Extra small text', size: '12px', rem: '0.75rem' },
  { class: 'text-sm', description: 'Small text', size: '14px', rem: '0.875rem' },
  { class: 'text-base', description: 'Base text (16px root)', size: '16px', rem: '1rem' },
  { class: 'text-lg', description: 'Large text', size: '18px', rem: '1.125rem' },
  { class: 'text-xl', description: 'Extra large text', size: '20px', rem: '1.25rem' },
  { class: 'text-2xl', description: '2X large text', size: '24px', rem: '1.5rem' },
  { class: 'text-3xl', description: '3X large text', size: '30px', rem: '1.875rem' },
  { class: 'text-4xl', description: '4X large text', size: '36px', rem: '2.25rem' },
  { class: 'font-light', description: 'Light font weight', weight: '300' },
  { class: 'font-normal', description: 'Normal font weight', weight: '400' },
  { class: 'font-medium', description: 'Medium font weight', weight: '500' },
  { class: 'font-semibold', description: 'Semibold font weight', weight: '600' },
  { class: 'font-bold', description: 'Bold font weight', weight: '700' },
];

// Font Family Examples
const fontExamples = [
  { class: 'font-sans', description: 'Sans serif font', family: 'var(--aw-font-sans)' },
  { class: 'font-serif', description: 'Serif font', family: 'var(--aw-font-serif)' },
  { class: 'font-heading', description: 'Heading font', family: 'var(--aw-font-heading)' },
  { class: 'font-mono', description: 'Monospace font', family: 'ui-monospace, monospace' },
];

// Card Component Examples
const cardExamples = [
  {
    title: 'Simple Card',
    class: 'bg-white dark:bg-gray-900 rounded-lg border p-6 shadow-sm',
    description: 'Basic card with border and subtle shadow',
  },
  {
    title: 'Elevated Card',
    class: 'bg-white dark:bg-gray-900 rounded-xl p-6 shadow-lg',
    description: 'Card with larger shadow for more elevation',
  },
  {
    title: 'Interactive Card',
    class: 'bg-white dark:bg-gray-900 rounded-lg border p-6 shadow-sm hover:shadow-md transition-shadow cursor-pointer',
    description: 'Card with hover effects and transitions',
  },
];
---

<Layout metadata={metadata}>
<DevComponentsSidebar currentPage="styles-guide">
  <div class="container mx-auto px-4 py-8 max-w-7xl">
    <div class="mb-12">
      <h1 class="text-4xl font-bold text-center mb-4">Global Styles Guide</h1>
      <p class="text-lg text-center text-muted max-w-3xl mx-auto">
        Complete documentation of all global styles, colors, Tailwind utilities, and configuration settings in the
        AstroWind template.
      </p>
    </div>

    <!-- CSS Custom Properties Section -->
    <section id="css-custom-properties" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">CSS Custom Properties</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>File:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">src/components/CustomStyles.astro</code>
        </p>

        <!-- Light Theme -->
        <div class="mb-8">
          <h3 class="text-2xl font-semibold mb-4">Light Theme (:root)</h3>

          <!-- Color Variables -->
          <h4 class="text-xl font-medium mb-3">Colors</h4>
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3 mb-6">
            {
              Object.entries(cssCustomProperties.light)
                .filter(([key]) => key.includes('color'))
                .map(([property, value]) => (
                  <div class="bg-white dark:bg-gray-900 rounded-lg border p-3 shadow-sm">
                    <div
                      class="w-full h-12 rounded-md mb-2 border"
                      style={`background: ${value}; ${value.includes('/') ? 'background: rgba(' + extractColorValue(value) + ')' : ''}`}
                    />
                    <div class="text-xs">
                      <div class="font-mono text-xs text-primary truncate">{property.replace('--aw-color-', '')}</div>
                      <div class="font-mono text-xs text-muted truncate">{value}</div>
                    </div>
                  </div>
                ))
            }
          </div>

          <!-- Font Variables -->
          <h4 class="text-xl font-medium mb-3">Typography</h4>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            {
              Object.entries(cssCustomProperties.light)
                .filter(([key]) => key.includes('font'))
                .map(([property, value]) => (
                  <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
                    <div class="mb-2" style={`font-family: ${value}`}>
                      <span class="text-lg">Aa Bb Cc</span>
                    </div>
                    <div class="text-sm">
                      <div class="font-mono text-xs text-primary">{property}</div>
                      <div class="font-mono text-xs text-muted">{value}</div>
                    </div>
                  </div>
                ))
            }
          </div>
        </div>

        <!-- Dark Theme -->
        <div class="mb-8">
          <h3 class="text-2xl font-semibold mb-4">Dark Theme (.dark)</h3>

          <h4 class="text-xl font-medium mb-3">Colors</h4>
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3 mb-6">
            {
              Object.entries(cssCustomProperties.dark)
                .filter(([key]) => key.includes('color'))
                .map(([property, value]) => (
                  <div class="bg-white dark:bg-gray-900 rounded-lg border p-3 shadow-sm">
                    <div
                      class="w-full h-12 rounded-md mb-2 border"
                      style={`background: ${value}; ${value.includes('/') ? 'background: rgba(' + extractColorValue(value) + ')' : ''}`}
                    />
                    <div class="text-xs">
                      <div class="font-mono text-xs text-primary truncate">{property.replace('--aw-color-', '')}</div>
                      <div class="font-mono text-xs text-muted truncate">{value}</div>
                    </div>
                  </div>
                ))
            }
          </div>
        </div>
      </div>
    </section>

    <!-- Tailwind Utilities Section -->
    <section id="tailwind-utilities" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Custom Tailwind Utilities</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>File:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">src/assets/styles/tailwind.css</code> (Utilities Layer)
        </p>

        <div class="grid gap-4">
          {
            tailwindUtilities.map((util) => (
              <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                  <div class="flex-1">
                    <h4 class="font-mono text-lg text-primary font-medium">{util.class}</h4>
                    <p class="text-sm text-muted mb-2">{util.description}</p>
                    <code class="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded font-mono">{util.css}</code>
                  </div>
                  <div
                    class="w-24 h-16 rounded border"
                    style={`${util.css.includes('background') ? util.css.replace('background-color: ', 'background: ') : 'border: 2px solid ' + (util.css.includes('color: ') ? util.css.replace('color: ', '') : '#ccc')}`}
                  />
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- Button Components Section -->
    <section id="button-components" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Button Components</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>File:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">src/assets/styles/tailwind.css</code> (Components
          Layer)
        </p>

        <div class="grid gap-6">
          {
            buttonComponents.map((component) => (
              <div class="bg-white dark:bg-gray-900 rounded-lg border p-6 shadow-sm">
                <div class="flex flex-col md:flex-row md:items-center gap-4">
                  <div class="flex-1">
                    <h4 class="font-mono text-lg text-primary font-medium mb-2">{component.class}</h4>
                    <p class="text-sm text-muted mb-3">{component.description}</p>
                    <code class="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded font-mono block">
                      {component.css}
                    </code>
                  </div>
                  <div class="flex gap-2">
                    <button class={component.class.replace('.', '') + ' text-sm'}>Sample Button</button>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- Configuration Section -->
    <section id="configuration" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Site Configuration</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>File:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">src/config.yaml</code>
        </p>

        <div class="grid md:grid-cols-2 gap-6">
          <!-- Site Settings -->
          <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
            <h4 class="text-lg font-semibold mb-3 text-primary">Site Settings</h4>
            <div class="space-y-2">
              {
                Object.entries(configData.site).map(([key, value]) => (
                  <div class="flex justify-between items-center py-1 border-b border-gray-100 dark:border-gray-800 last:border-b-0">
                    <span class="font-mono text-sm text-muted">{key}:</span>
                    <span class="font-mono text-sm text-right max-w-xs truncate">{String(value)}</span>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- Metadata Settings -->
          <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
            <h4 class="text-lg font-semibold mb-3 text-primary">Metadata</h4>
            <div class="space-y-2">
              <div class="flex justify-between items-center py-1 border-b border-gray-100 dark:border-gray-800">
                <span class="font-mono text-sm text-muted">title.default:</span>
                <span class="font-mono text-sm">{configData.metadata.title.default}</span>
              </div>
              <div class="flex justify-between items-center py-1 border-b border-gray-100 dark:border-gray-800">
                <span class="font-mono text-sm text-muted">title.template:</span>
                <span class="font-mono text-sm">{configData.metadata.title.template}</span>
              </div>
              <div class="py-1 border-b border-gray-100 dark:border-gray-800">
                <span class="font-mono text-sm text-muted">description:</span>
                <p class="font-mono text-sm mt-1 break-words">{configData.metadata.description}</p>
              </div>
            </div>
          </div>

          <!-- I18N Settings -->
          <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
            <h4 class="text-lg font-semibold mb-3 text-primary">Internationalization</h4>
            <div class="space-y-2">
              {
                Object.entries(configData.i18n).map(([key, value]) => (
                  <div class="flex justify-between items-center py-1 border-b border-gray-100 dark:border-gray-800 last:border-b-0">
                    <span class="font-mono text-sm text-muted">{key}:</span>
                    <span class="font-mono text-sm">{String(value)}</span>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- UI Settings -->
          <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
            <h4 class="text-lg font-semibold mb-3 text-primary">UI Configuration</h4>
            <div class="space-y-2">
              {
                Object.entries(configData.ui).map(([key, value]) => (
                  <div class="flex justify-between items-center py-1 border-b border-gray-100 dark:border-gray-800 last:border-b-0">
                    <span class="font-mono text-sm text-muted">{key}:</span>
                    <span class="font-mono text-sm">{String(value)}</span>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Typography Section -->
    <section id="typography" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Typography Scale</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>File:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded"
            >Tailwind CSS defaults + Custom configuration</code
          >
        </p>

        <div class="space-y-6">
          {
            typographyExamples.map((example) => (
              <div class="bg-white dark:bg-gray-900 rounded-lg border p-6 shadow-sm">
                <div class="flex flex-col lg:flex-row lg:items-center gap-4">
                  <div class="flex-1">
                    <div
                      class={example.class}
                      set:html={`<${example.tag}>Sample ${example.tag.toUpperCase()} Heading</${example.tag}>`}
                    />
                  </div>
                  <div class="lg:w-80">
                    <div class="text-sm">
                      <div class="font-mono text-xs text-primary">{example.tag}</div>
                      <div class="font-mono text-xs text-muted">{example.class}</div>
                      <div class="text-xs text-muted mt-1">{example.description}</div>
                    </div>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- Font Families Section -->
    <section id="font-families" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Font Families</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>Files:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">src/components/CustomStyles.astro</code> &
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">tailwind.config.js</code>
        </p>

        <div class="grid md:grid-cols-2 gap-4">
          {
            fontExamples.map((font) => (
              <div class="bg-white dark:bg-gray-900 rounded-lg border p-6 shadow-sm">
                <div class={font.class + ' text-2xl mb-3'}>The quick brown fox jumps over the lazy dog</div>
                <div class="text-sm">
                  <div class="font-mono text-xs text-primary">{font.class}</div>
                  <div class="font-mono text-xs text-muted">{font.family}</div>
                  <div class="text-xs text-muted mt-1">{font.description}</div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- Text Formats Section -->
    <section id="text-formats" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Text Formats & Weights</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>Framework:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">Tailwind CSS Typography Utilities</code>
        </p>

        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
          {
            textFormatExamples.map((format) => (
              <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
                <div class={format.class + ' mb-2'}>Sample Text Content</div>
                <div class="text-sm">
                  <div class="font-mono text-xs text-primary">{format.class}</div>
                  <div class="text-xs text-muted">{format.description}</div>
                  {format.size && (
                    <div class="font-mono text-xs text-muted">
                      {format.size} ({format.rem})
                    </div>
                  )}
                  {format.weight && <div class="font-mono text-xs text-muted">Weight: {format.weight}</div>}
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- Shadows Section -->
    <section id="shadows" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Box Shadows</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>Framework:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">Tailwind CSS Shadow Utilities</code>
        </p>

        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {
            shadowExamples.map((shadow) => (
              <div class="bg-white dark:bg-gray-900 rounded-lg border p-4">
                <div class={`w-full h-20 bg-gradient-to-r from-primary to-secondary rounded-lg mb-4 ${shadow.class}`} />
                <div class="text-sm">
                  <div class="font-mono text-xs text-primary">{shadow.class}</div>
                  <div class="text-xs text-muted mb-2">{shadow.description}</div>
                  <code class="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded font-mono block break-all">
                    {shadow.value}
                  </code>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- Border Radius Section -->
    <section id="border-radius" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Border Radius</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>Framework:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">Tailwind CSS Border Radius Utilities</code>
        </p>

        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
          {
            radiusExamples.map((radius) => (
              <div
                class={`bg-gradient-to-br from-primary/20 to-secondary/20 border-2 border-primary/30 p-6 shadow-sm ${radius.class}`}
              >
                <div class="text-sm text-center">
                  <div class="font-mono text-xs text-primary font-semibold">{radius.class}</div>
                  <div class="text-xs text-muted mt-1">{radius.description}</div>
                  <div class="font-mono text-xs text-muted">Value: {radius.value}</div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- Card Components Section -->
    <section id="card-components" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Card Components</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-6">
        <p class="text-sm text-muted mb-4">
          <strong>Implementation:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">Custom combinations of Tailwind utilities</code>
        </p>

        <div class="grid md:grid-cols-1 lg:grid-cols-2 gap-6">
          {
            cardExamples.map((card) => (
              <div class="space-y-4">
                <div class={card.class}>
                  <h4 class="text-lg font-semibold mb-2 text-primary">{card.title}</h4>
                  <p class="text-muted text-sm mb-4">{card.description}</p>
                  <div class="flex justify-between items-center">
                    <span class="text-xs text-muted">Sample card content</span>
                    <button class="btn-primary px-4 py-2 text-sm">Action</button>
                  </div>
                </div>
                <div class="text-xs">
                  <div class="font-mono text-primary mb-1">Classes used:</div>
                  <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs break-all">{card.class}</code>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <!-- Additional Styles Section -->
    <section id="additional-styles" class="mb-16">
      <h2 class="text-3xl font-bold mb-6 border-b-2 border-primary pb-2">Additional Global Styles</h2>
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
        <p class="text-sm text-muted mb-4">
          <strong>Files:</strong>
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">src/assets/styles/tailwind.css</code> &
          <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">src/components/CustomStyles.astro</code>
        </p>

        <div class="grid md:grid-cols-2 gap-6">
          <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
            <h4 class="text-lg font-semibold mb-3 text-primary">Header Scroll Effects</h4>
            <code class="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded font-mono block">
              #header.scroll &gt; div:first-child<br />
              @apply bg-page md:bg-white/90 md:backdrop-blur-md
            </code>
          </div>

          <div class="bg-white dark:bg-gray-900 rounded-lg border p-4 shadow-sm">
            <h4 class="text-lg font-semibold mb-3 text-primary">Selection Colors</h4>
            <div class="space-y-2">
              <div>
                <span class="text-sm text-muted">Light: </span>
                <span class="px-2 py-1 rounded text-sm" style="background: lavender;">lavender</span>
              </div>
              <div>
                <span class="text-sm text-muted">Dark: </span>
                <span class="px-2 py-1 rounded text-sm bg-black text-white">black with snow text</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>
</DevComponentsSidebar>
</Layout>
