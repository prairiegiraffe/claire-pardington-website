---
import { DEV_PAGES, getCurrentPageId, getPageComponents, type PageComponent } from '~/lib/dev-components-config';
import ToggleTheme from '~/components/common/ToggleTheme.astro';

export interface Props {
  currentPage?: string;
  components?: Array<{ id: string; name?: string; title?: string }>;
}

const { currentPage, components: providedComponents = [] } = Astro.props as Props;

// Auto-detect current page if not provided
const detectedPageId = currentPage || getCurrentPageId(Astro.url.pathname);

const normalizedProvidedComponents: PageComponent[] = providedComponents.map((component) => ({
  id: component.id,
  name: component.name ?? component.title ?? component.id,
  title: component.title ?? component.name ?? component.id,
}));

let resolvedPages = DEV_PAGES.map((page) => {
  const componentList = getPageComponents(page.id);

  return {
    ...page,
    components: componentList,
    hasComponents: componentList.length > 0,
    isCurrent: page.id === detectedPageId,
  };
});

const currentPageIndex = resolvedPages.findIndex((page) => page.isCurrent);

if (currentPageIndex !== -1 && normalizedProvidedComponents.length > 0) {
  resolvedPages[currentPageIndex] = {
    ...resolvedPages[currentPageIndex],
    components: normalizedProvidedComponents,
    hasComponents: normalizedProvidedComponents.length > 0,
  };
}

const currentPageComponents = currentPageIndex !== -1 ? resolvedPages[currentPageIndex].components : [];
const samePageComponentIds = currentPageComponents.map((component) => component.id);
---

<div
  id="dev-sidebar"
  class="fixed left-0 top-0 z-40 h-screen w-80 overflow-y-auto border-r border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-900"
>
  <!-- Sidebar Header -->
  <div class="border-b border-gray-200 p-4 dark:border-gray-700">
    <div class="flex items-center justify-between gap-3">
      <div>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Component Library</h2>
        <p class="text-sm text-gray-600 dark:text-gray-400">Navigate components</p>
      </div>
      <ToggleTheme
        label="Toggle color mode"
        class="inline-flex h-9 w-9 items-center justify-center rounded-lg border border-gray-200 text-gray-500 transition-colors hover:bg-gray-100 dark:border-gray-700 dark:text-gray-300 dark:hover:bg-gray-800"
        iconClass="h-5 w-5"
      />
    </div>
  </div>

  <!-- Navigation Sections -->
  <div class="space-y-6 p-4">
    <div>
      <h3 class="mb-3 text-sm font-medium text-gray-900 dark:text-white">Pages</h3>
      <ul class="space-y-1">
        {resolvedPages.map((page) => (
          <li>
            <div class="flex items-center">
              <a
                href={page.href}
                class={`flex-1 rounded-lg px-3 py-2 text-sm transition-colors ${
                  page.isCurrent
                    ? 'bg-primary/10 font-medium text-primary'
                    : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800'
                }`}
              >
                {page.name}
                {page.hasComponents && (
                  <span class="ml-2 rounded bg-gray-200 px-1.5 py-0.5 text-xs text-gray-600 dark:bg-gray-700 dark:text-gray-400">
                    {page.components.length}
                  </span>
                )}
              </a>

              {page.hasComponents && (
                <button
                  type="button"
                  class="ml-1 rounded p-1 text-gray-400 transition-colors hover:text-gray-600 dark:hover:text-gray-300"
                  data-submenu-toggle={page.id}
                  aria-controls={`submenu-${page.id}`}
                  aria-expanded={page.isCurrent ? 'true' : 'false'}
                >
                  <span class="sr-only">Toggle {page.name} components</span>
                  <svg
                    class={`h-4 w-4 transition-transform ${page.isCurrent ? 'rotate-90' : ''}`}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </button>
              )}
            </div>

            {page.hasComponents && (
              <div
                id={`submenu-${page.id}`}
                data-submenu={page.id}
                class={`ml-4 mt-1 space-y-1 overflow-hidden transition-all duration-200 ${
                  page.isCurrent ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'
                }`}
              >
                {page.components.map((component) => {
                  const isSamePage = page.isCurrent;
                  const href = isSamePage ? `#${component.id}` : `${page.href}#${component.id}`;

                  return (
                    <a
                      href={href}
                      data-component-link={isSamePage ? 'same-page' : 'other-page'}
                      data-component-target={component.id}
                      class="block rounded px-3 py-1 text-xs text-gray-600 transition-colors hover:bg-gray-50 hover:text-primary dark:text-gray-400 dark:hover:bg-gray-800"
                    >
                      {component.title}
                    </a>
                  );
                })}
              </div>
            )}
          </li>
        ))}
      </ul>
    </div>
  </div>

  <button
    id="sidebar-toggle"
    type="button"
    class="fixed left-80 top-4 z-50 rounded-r-lg border border-gray-200 bg-white p-2 shadow-md transition-all hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-900 dark:hover:bg-gray-800"
    aria-label="Toggle component sidebar"
  >
    <svg class="h-4 w-4 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>
</div>

<div
  id="content-offset"
  class="ml-80 px-6 sm:px-8 lg:px-12 transition-all duration-300"
  data-component-ids={samePageComponentIds.length ? samePageComponentIds.join(',') : undefined}
>
  <slot />
</div>


<style>
  #dev-sidebar {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  #dev-sidebar::-webkit-scrollbar {
    display: none;
  }
</style>
<script>
  const initDevSidebar = () => {
    const sidebar = document.getElementById('dev-sidebar');
    const toggleBtn = document.getElementById('sidebar-toggle');
    const contentOffset = document.getElementById('content-offset');

    if (!sidebar || !toggleBtn || !contentOffset) {
      return;
    }

    const openIcon =
      '<svg class=\"h-4 w-4 text-gray-600 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\"></path></svg>';
    const closedIcon =
      '<svg class=\"h-4 w-4 text-gray-600 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\"></path></svg>';

    if (!toggleBtn.dataset.sidebarBound) {
      toggleBtn.dataset.sidebarBound = 'true';
      let sidebarOpen = true;
      const setSidebarState = (isOpen) => {
        sidebarOpen = isOpen;

        if (isOpen) {
          sidebar.style.transform = 'translateX(0)';
          toggleBtn.style.left = '20rem';
          toggleBtn.innerHTML = openIcon;
          contentOffset.classList.remove('ml-0');
          contentOffset.classList.add('ml-80');
        } else {
          sidebar.style.transform = 'translateX(-100%)';
          toggleBtn.style.left = '0.5rem';
          toggleBtn.innerHTML = closedIcon;
          contentOffset.classList.remove('ml-80');
          contentOffset.classList.add('ml-0');
        }
      };

      setSidebarState(true);

      toggleBtn.addEventListener('click', () => {
        setSidebarState(sidebarOpen ? false : true);
      });

      toggleBtn.innerHTML = openIcon;
    }

    document.querySelectorAll('[data-submenu-toggle]').forEach((button) => {
      if (button.dataset.sidebarBound) {
        return;
      }

      button.dataset.sidebarBound = 'true';
      button.addEventListener('click', () => {
        const pageId = button.getAttribute('data-submenu-toggle');
        if (!pageId) return;

        const submenu = document.querySelector(`[data-submenu=\"${pageId}\"]`);
        if (!submenu) return;

        const isOpen = submenu.classList.contains('max-h-96');

        if (isOpen) {
          submenu.classList.remove('max-h-96', 'opacity-100');
          submenu.classList.add('max-h-0', 'opacity-0');
          button.setAttribute('aria-expanded', 'false');
        } else {
          submenu.classList.remove('max-h-0', 'opacity-0');
          submenu.classList.add('max-h-96', 'opacity-100');
          button.setAttribute('aria-expanded', 'true');
        }

        const icon = button.querySelector('svg');
        if (icon) {
          icon.style.transform = isOpen ? 'rotate(0deg)' : 'rotate(90deg)';
        }
      });
    });

    const componentIds = (contentOffset.dataset.componentIds || '')
      .split(',')
      .map((id) => id.trim())
      .filter(Boolean);

    document.querySelectorAll('[data-component-link]').forEach((link) => {
      if (link.dataset.sidebarBound) {
        return;
      }

      link.dataset.sidebarBound = 'true';
      link.addEventListener('click', (event) => {
        const targetId = link.getAttribute('data-component-target');
        if (!targetId) {
          return;
        }

        const targetHref = (link.getAttribute('href') || '').trim();
        const samePageHref = targetHref.startsWith('#') || link.dataset.componentLink === 'same-page';
        const samePath = targetHref.startsWith(window.location.pathname + '#');
        const isSamePageLink = samePageHref || samePath;

        if (isSamePageLink) {
          event.preventDefault();
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            history.replaceState(null, '', `#${targetId}`);
          }
        }
      });
    });

    if (componentIds.length > 0) {
      const codeElements = Array.from(document.querySelectorAll('section code'));

      componentIds.forEach((id) => {
        if (document.getElementById(id)) {
          return;
        }

        const matchingCode = codeElements.find((code) => code.textContent?.trim() === id);
        if (matchingCode) {
          const section = matchingCode.closest('section');
          if (section) {
            section.setAttribute('id', id);
          }
        }
      });
    }

    document.querySelectorAll('[data-submenu]').forEach((submenu) => {
      const pageId = submenu.getAttribute('data-submenu');
      if (!pageId) return;

      const button = document.querySelector(`[data-submenu-toggle=\"${pageId}\"]`);
      if (!button) return;

      const icon = button.querySelector('svg');
      const isOpen = submenu.classList.contains('max-h-96');

      button.setAttribute('aria-expanded', isOpen ? 'true' : 'false');
      if (icon) {
        icon.style.transform = isOpen ? 'rotate(90deg)' : 'rotate(0deg)';
      }
    });
  };

  const scheduleInit = () => {
    requestAnimationFrame(initDevSidebar);
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', scheduleInit, { once: true });
  } else {
    scheduleInit();
  }

  document.addEventListener('astro:page-load', scheduleInit);
  document.addEventListener('astro:after-swap', scheduleInit);
</script>
